//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: sk_bum.bt
//   Authors: TGE
//   Version: 1.0
//   Purpose: Parse Senran Kagura: New Link BUM files
//  Category: 
// File Mask: *.bum
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../common/include.h"

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u8 Data[ Length - 8 ];
} TUnknownChunk;

char[] ReadMagic()
{
    local int i;
    local char magic[5];
    for ( i = 0; i < 4; ++i )
        magic[i] = ReadByte( FTell() + i );

    return magic;
}

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    
    local u32 modelPackEnd = FTell() + Length - 8;
    local char magic[5];
    while ( FTell() < modelPackEnd )
    {
        magic = ReadMagic();
        //Printf( "TModelPack: %s\n", magic );
    
        switch ( magic )
        {
            case "MODL":
                struct TModel Model;
                break;

            default:
                TUnknownChunk Chunk;
                break;
        }
    }
} TModelPack;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    
    local u32 modelEnd = FTell() + Length - 8;
    local char magic[5];
    while ( FTell() < modelEnd )
    {
        magic = ReadMagic();
        //Printf( "   TModel: %s\n", magic );
    
        switch ( magic )
        {
            case "BBOX":
                struct TExtents3D BoundingBoxChunk;
                break;

            case "NODE":
                struct TNode Node;
                break;

            case "PART":
                struct TPart Part;
                break;
    
            case "MATR":
                struct TMaterial Material;
                break;

            case "MATS":
                struct TMaterialShader MaterialShader;
                break;
    
            default:
                TUnknownChunk Chunk;
                break;
        }
    }
} TModel;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    TVector3 Min;
    TVector3 Max;
} TExtents3D;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    
    local u32 nodeEnd = FTell() + Length - 8;
    local char magic[5];
    while ( FTell() < nodeEnd )
    {
        magic = ReadMagic();
        //Printf( "       TNode: %s\n", magic );
    
        switch ( magic )
        {
            case "NAME":
                struct TName Name;
                break;

            case "BBOX":
                struct TExtents3D BoundingBoxChunk;
                break;

            case "NSTA":
                struct TNodeIndex Index;
                break;

            case "PARE":
                struct TNodeParentIndex ParentIndex;
                break;

            case "TRNS":
                struct TNodeTranslation Translation;
                break;

            case "BLEB":
                struct TBoneMapping BoneMapping;
                break;

            case "BLEO":
                struct TBoneInverseBindMatrices InverseBindMatrices( BoneMapping.BoneCount );
                break;

            case "DRWP":
                struct TDrawParam DrawParam;
                break;

            default:
                TUnknownChunk Chunk;
                break;
        }
    }
} TNode;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u32 Index;
} TNodeIndex;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    s32 Index;
} TNodeParentIndex;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    Vector3 Translation;
} TNodeTranslation;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u32 BoneCount;
    u16 BoneIndices[ BoneCount ];
    FAlign( 4 );
} TBoneMapping;

typedef struct( u32 count )
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    struct
    {
        struct
        {
            float Column[4];
        } Row[4];
    } InverseBindMatrix[ count ];
} TBoneInverseBindMatrices;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u32 Field08;
    u32 Field0C;
} TDrawParam;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    
    local u32 partEnd = FTell() + Length - 8;
    local char magic[5];
    while ( FTell() < partEnd )
    {
        magic = ReadMagic();
        //Printf( "       TPart: %s\n", magic );
    
        switch ( magic )
        {
            case "NAME":
                struct TName Name;
                break;

            case "BBOX":
                struct TExtents3D BoundingBoxChunk;
                break;

            case "MESH":
                struct TMesh Mesh;
                break;

            case "ARAY":
                struct TVertexBuffer VertexBuffer;
                break;

            default:
                TUnknownChunk Chunk;
                break;
        }
    }
} TPart;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u8 Data[ Length - 8 ];
} TName <read=TNameToString>;

string TNameToString( TName& value )
{
    return value.Data;
}

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u8 Data[ Length - 8 ];
} TString <read=TStringToString>;

string TStringToString( TString& value )
{
    return value.Data;
}

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    
    local u32 meshEnd = FTell() + Length - 8;
    local char magic[5];
    while ( FTell() < meshEnd )
    {
        magic = ReadMagic();
        //Printf( "           TMesh: %s\n", magic );
    
        switch ( magic )
        {
            case "BBOX":
                struct TExtents3D BoundingBoxChunk;
                break;

            case "SMAT":
                struct TMeshMaterialIndex MaterialIndex;
                break;

            case "DRWA":
                struct TIndexBuffer IndexBuffer;
                break;

            default:
                TUnknownChunk Chunk;
                break;
        }
    }
} TMesh;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u32 MaterialIndeex;
} TMeshMaterialIndex;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u16 Field08;
    u16 IndexCount;
    u16 Indices[ IndexCount ];
    FAlign( 4 );
} TIndexBuffer;

enum<u16> VertexFormat
{
    VertexFormat_Position = 1 << 0,
    VertexFormat_Normal = 1 << 1,
    VertexFormat_Color0 = 1 << 2,
    VertexFormat_TexCoord0 = 1 << 3,
    VertexFormat_Unknown1 = 1 << 5,
    VertexFormat_Unknown2 = 1 << 6,
    VertexFormat_Unknown3 = 1 << 7,
    VertexFormat_BoneWeights4 = 1 << 8,
    VertexFormat_Unknown5 = 1 << 9,
    VertexFormat_BoneWeights6 = 1 << 10,
    VertexFormat_BoneWeights7 = 1 << 11,
    VertexFormat_BoneWeights = 1 << 13
};

const VertexFormat KNOWN_VERTEX_FORMATS = 
    VertexFormat_Position | VertexFormat_Normal |
    VertexFormat_TexCoord0 | VertexFormat_Color0 |
    VertexFormat_Unknown1 | VertexFormat_Unknown2 |
    VertexFormat_Unknown3 | VertexFormat_Unknown4 | 
    VertexFormat_Unknown5 | VertexFormat_Unknown6 |
    VertexFormat_Unknown7 |
    VertexFormat_BoneWeights;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    VertexFormat Format;
    u16 VertexCount;
    local u32 i, j;
    Assert( ( Format & ~KNOWN_VERTEX_FORMATS ) == 0 );
    for ( i = 0; i < VertexCount; ++i )
    {
        struct
        {
            if ( Format & VertexFormat_Position ) TVector3 Position;
            if ( Format & VertexFormat_Normal ) TVector3 Normal;
            if ( Format & VertexFormat_TexCoord0 ) TVector2 TexCoord;
            if ( Format & VertexFormat_Color0 ) u32 Color;
            if ( Format & VertexFormat_BoneWeights ) u8 BoneWeights[8];
        } Vertex;
    }
    FAlign( 4 );
} TVertexBuffer;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    
    local u32 materialEnd = FTell() + Length - 8;
    local char magic[5];
    while ( FTell() < materialEnd )
    {
        magic = ReadMagic();
        //Printf( "       TMaterial: %s\n", magic );
    
        switch ( magic )
        {
            case "NAME":
                struct TName Name;
                break;

            default:
                TUnknownChunk Chunk;
                break;
        }
    }
} TMaterial;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    u16 Field00;
    u16 Field02;
    
    local u32 materialShaderEnd = FTell() + Length - 12;
    local char magic[5];
    while ( FTell() < materialShaderEnd )
    {
        magic = ReadMagic();
        //Printf( "       TMaterialShader: %s\n", magic );
    
        switch ( magic )
        {
            case "NAME":
                struct TName Name;
                break;

            case "SAMP":
                struct TSampler Sampler;
                break;

            default:
                TUnknownChunk Chunk;
                break;
        }
    }
} TMaterialShader;

typedef struct
{
    SetRandomBackColor();
    char Magic[4];
    u32 Length;
    struct TName Name;
    struct TName TextureName;
    u32 ParameterCount;
    local u32 i;
    for ( i = 0; i < ParameterCount; ++i )
    {
        struct
        {
            struct TName Name;
            struct TString Value;
        } Parameter;
    }
} TSampler;

TModelPack File;