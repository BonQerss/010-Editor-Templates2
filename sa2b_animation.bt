//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: sa2b_animation.bt
//   Authors: TGE
//   Version: 1.0
//   Purpose: Parse Sonic Adventure 2 Battle (PC) animation files
//  Category: 
// File Mask: *mtn.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

//---------------------------------------------
// Primitive types
//---------------------------------------------
typedef char bool;
typedef char s8;
typedef uchar u8;
typedef int16 s16;
typedef uint16 u16;
typedef int16 s16;
typedef int32 s32;
typedef uint32 u32;
typedef int64 s64;
typedef uint64 u64;
typedef float f32;
typedef double f64;

//---------------------------------------------
// Script global variables & functions
//---------------------------------------------
local u32 i;
local u32 j;
local u32 gSavedPos[128];
local u32 gSavedPosIndex = 0;
local u32 gOffsetBase = 0;

struct Offset32;
void FSeekOffset( Offset32& offset )
{
    FSeek( offset.Value + gOffsetBase );
}

void PushFPos()
{
    gSavedPos[++gSavedPosIndex] = FTell();
}

void PushFPosSeekOffset( Offset32& offset )
{
    PushFPos();
    FSeekOffset( offset );
}

void PopFPos()
{
    FSeek( gSavedPos[gSavedPosIndex--] );
}

void HexPrint( u32 num )
{
    Printf( "0x%08X\n", num );
}

//---------------------------------------------
// Random
//---------------------------------------------
local uint __RandomSeed = 0xDEADBABE;
local uint __RandomBit = 0;
local uint __RandomCount = 0;
 
uint MyRandom( uint to )
{
    ++__RandomCount;
    __RandomBit  = ( (__RandomSeed >> 0 ) ^ ( __RandomSeed >> 2 ) ^ ( __RandomSeed >> 3 ) ^ ( __RandomSeed >> 5 ) ) & 1;
    __RandomSeed = ( ( ( ( __RandomBit << 15 ) | ( __RandomSeed >> 1 ) ) + ( 0xBABE / __RandomCount ) ) % to );

    while( __RandomSeed < 0 )
        __RandomSeed += to;

    return __RandomSeed;
}

uint RandomColor()
{
    return MyRandom( 0xFFFFFFFF );
}

void SetRandomBackColor()
{
    SetBackColor( RandomColor() );
}

local u32 gBackColorStack[128];
local u32 gBackColorStackIndex = 0;

void PushBackColor()
{
    local u32 color = RandomColor();
    gBackColorStack[ gBackColorStackIndex++ ] = color;
    SetBackColor( color );
}

void PopBackColor()
{
    SetBackColor( gBackColorStack[ gBackColorStackIndex-- ] );
}

//---------------------------------------------
// Basic type definitions
//---------------------------------------------
typedef struct
{
    u32 Value;
    local u32 AbsoluteValue = Value + gOffsetBase;
    local u8 Valid = AbsoluteValue != 0;
} Offset32 <read=ReadOffset32>;

string ReadOffset32( Offset32& offset )
{
    local char buffer[12];
    SPrintf( buffer, "0x%08X", offset.Value );

    return buffer;
}

typedef struct
{
    f32 X;
    f32 Y;
} Vector2 <read=ReadVector2>;

string ReadVector2( Vector2& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f]", value.X, value.Y );

    return buffer;
}

typedef struct
{
    f32 X;
    f32 Y;
    f32 Z;
} Vector3 <read=ReadVector3>;

string ReadVector3( Vector3& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", value.X, value.Y, value.Z );

    return buffer;
}

// Rotation in BAMS
typedef struct
{
    s32 X;
    s32 Y;
    s32 Z;
} Rotation3 <read=ReadRotation3>;

float AngleToDegrees( s32 angle )
{
    return  ( angle * 360.0f ) / 65536.0f;
}

s32 DegreesToAngle( float degrees )
{
    return ((s32)((degrees * 65536.0f) / 360.0f));
}

string ReadRotation3( Rotation3& value )
{
    local char buffer[255];
    SPrintf( buffer, "[%.6f, %.6f, %.6f]", 
        AngleToDegrees( value.X ), 
        AngleToDegrees( value.Y ), 
        AngleToDegrees( value.Z ));

    return buffer;
}

//---------------------------------------------
// Format type definitions
//---------------------------------------------
BigEndian();
BitfieldDisablePadding();

enum<u16> KeyframeFlags
{
    KeyframeFlags_Position    = 1 << 0,
    KeyframeFlags_Rotation    = 1 << 1,
    KeyframeFlags_Scale       = 1 << 2,
    KeyframeFlags_Vector      = 1 << 3,
    KeyframeFlags_Vertex      = 1 << 4,
    KeyframeFlags_Normal      = 1 << 5,
    KeyframeFlags_Target      = 1 << 6,
    KeyframeFlags_Roll        = 1 << 7,
    KeyframeFlags_Rotation2   = 1 << 8,
    KeyframeFlags_Color       = 1 << 9,
    KeyframeFlags_Intensity   = 1 << 10,
    KeyframeFlags_Spot        = 1 << 11,
    KeyframeFlags_Point       = 1 << 12,
    KeyframeFlags_Quaternion  = 1 << 13,
    
    KeyframeFlags_Linear      = 0x0000,
    KeyframeFlags_Spline      = 0x0040,
    KeyframeFlags_User        = 0x0080
};

typedef struct
{
    u32 Time;
    Vector3 Position;
} Keyframe_Position;

typedef struct
{
    u32 Time;
    Rotation3 Rotation;
} Keyframe_Rotation;

typedef struct
{
    u32 Time;
    Vector3 Scale;
} Keyframe_Scale;

typedef struct
{
    u32 Time;
    Rotation3 Rotation;
    Vector3 Axe;
} Keyframe_RotationAxe;

typedef struct
{
    u32 Time;
    u32 Offset;
} Keyframe_Pointer;

typedef struct
{
    u32 Time;
    f32 Value;
} Keyframe_Float;

typedef struct
{
    u32 Time;
    Vector2 Value;
} Keyframe_Vector2;

typedef struct
{
    u32 Time;
    f32 Nr;
    f32 Fr;
    Rotation3 I;
    Rotation3 O;
} Keyframe_Spot;

typedef struct
{
    u32 Time;
    u32 Value;
} Keyframe_U32;

typedef struct
{
    u32 Time;
    s32 Value;
} Keyframe_S32;

typedef struct
{
    u32 Time;
    f32 Value[4];
} Keyframe_Quaternion;

typedef struct
{
    s16 Id;
    u16 ObjectCount;

    local u16 objectCount = ObjectCount;
    
    struct
    {
        Offset32 Offset;
        if ( Offset.Valid )
        {
            PushFPosSeekOffset( Offset );
            struct Animation Value( objectCount );
            PopFPos();
        }
    } Animation;
     
} AnimationEntry;

// NJS_MOTION
typedef struct( u16 objectCount )
{
    PushBackColor();

    local KeyframeFlags flags = ReadUShort( FTell() + 8 );
   
    struct
    {
        Offset32 Offset;

        if ( Offset.Valid )
        {
            PushFPosSeekOffset( Offset );
            struct ObjectAnimation Value( flags )[ objectCount ];
            PopFPos();
        }
    } Data;

    u32 FrameCount;
    KeyframeFlags Flags;
    u16 InterpolationAndFactor;

    PopBackColor();
} Animation <optimize=false>;

typedef struct( KeyframeFlags flags )
{
    PushBackColor();

    local u32 mask = KeyframeFlags_Position | KeyframeFlags_Rotation | KeyframeFlags_Scale;
    if ( flags & ~mask )
    {
        Printf( "Unknown flag combination: 0x%08X\n", flags );
        Assert( false );   
    }

    if ( flags & KeyframeFlags_Position )
    {
        Offset32 PositionOffset;
    }

    if ( flags & KeyframeFlags_Rotation )   
    {
        Offset32 RotationOffet;
    }
        
    if ( flags & KeyframeFlags_Scale )
    {
        Offset32 ScaleOffset;
    }       

    if ( flags & KeyframeFlags_Position )
    {
        u32 PositionCount;
    }

    if ( flags & KeyframeFlags_Rotation )
    {
        u32 RotationCount;
    }

    if ( flags & KeyframeFlags_Scale )
    {
        u32 ScaleCount;
    }

    if ( flags & KeyframeFlags_Position && PositionOffset.Valid && PositionCount )
    {
        PushFPosSeekOffset( PositionOffset );
        Keyframe_Position Positions[ PositionCount ];
        PopFPos();
    }

    if ( flags & KeyframeFlags_Rotation && RotationOffet.Valid && RotationCount )
    {
        PushFPosSeekOffset( RotationOffet );
        Keyframe_Rotation Rotations[ RotationCount ];
        PopFPos();
    }

    if ( flags & KeyframeFlags_Scale && ScaleOffset.Valid && ScaleCount )
    {
        PushFPosSeekOffset( ScaleOffset );
        Keyframe_Scale Scales[ ScaleCount ];
        PopFPos();
    }

    PopBackColor();

} ObjectAnimation <optimize=false>;

// Parse file
PushBackColor();
while ( true )
{
    AnimationEntry Entry;
    if ( Entry.Id == -1 )
        break;
}