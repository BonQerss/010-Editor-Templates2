//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "common/include.h"

BigEndian();

typedef struct
{
    u32 Offset;
    local u32 Position = Offset + gBasePosition;
} TRelOffset <read=TRelOffsetToString, optimize=false>;

typedef struct
{
    u32 Offset;
    local u32 Position = Offset + gBasePosition;
    FPush();
    FSeek( Position );
    string Value;
    FPop();
} TStringRelOffset <read=TStringRelOffsetToString, optimize=false>;

string TRelOffsetToString(TRelOffset& value)
{
    string str;
    SPrintf(str, "0x%08X", value.Position );
    return str;
}

string TStringRelOffsetToString(TStringRelOffset& value)
{
    return value.Value;
}

typedef struct
{
    SetRandomBackColor();
    u32 StartSignature; /* AA_< */

    local u32 start = FTell();
    local u32 fourCC = ReadUInt( start + 0 );

    while ( fourCC != 0x3E5F4141 /* >_AA */ )
    {
        SetRandomBackColor();
        switch ( fourCC )
        {
            case 0x62737420: struct TbstChunk bstChunk; break;    
            case 0x6273746E: struct TbstnChunk bstnChunk; break;
            case 0x77732020: struct TwsChunk wsChunk; break;
            case 0x626E6B20: struct TbnkChunk bnkChunk; break;
            case 0x62736674: struct TbsftChunk bsftChunk; break;
            case 0x62736320: struct TbscChunk bscChunk; break;
            case 0x626D7320: struct TbmsChunk bmsChunk; break;
            case 0x62616163: struct TbaacChunk baacChunk; break;

            default: 
                Assert( false, "Not implemented" );
                break;
        }

        start = FTell();
        fourCC = ReadUInt( start + 0 );
    }

    u32 EndSignature;
} TBAA;

typedef struct
{
    u32 FourCC;
    TRelOffset BSOffset;
    TRelOffset BSTNOffset;
} TbstChunk;

typedef struct
{
    u32 FourCC;
    TRelOffset DataStartOffset;
    TRelOffset DataEndOffset;

    FPush();
    FSeek( DataStartOffset.Position );
    struct TBSTN Data;
    FPop();
} TbstnChunk;

typedef struct
{
    u32 FourCC;
    s32 Field04; // #
    TRelOffset WSYSOffset;
    u32 Field0C;

    FPush();
    FSeek( WSYSOffset.Position );
    struct TWSYS Data;
    FPop();
} TwsChunk;

typedef struct
{
    u32 FourCC;
    u32 Field04; // #
    TRelOffset IBNKOffset;
} TbnkChunk;

typedef struct
{
    u32 FourCC;
    TRelOffset bsfOffset;
} TbsftChunk;

typedef struct
{
    u32 FourCC;
    TRelOffset SCOffset;
    TRelOffset UnkOffset;
} TbscChunk;

typedef struct
{
    u32 FourCC;
    u32 Field04;
    TRelOffset DataStartOffset;
    TRelOffset DataEndOffset;

    FPush();
    FSeek( DataStartOffset.Position );
    u8 Data[ DataEndOffset.Offset - DataStartOffset.Offset ];
    FPop();
} TbmsChunk;

typedef struct
{
    u32 FourCC;
    TRelOffset DataStartOffset;
    TRelOffset DataEndOffset;


    FPush();
    FSeek( DataStartOffset.Position );
    u8 Data[ DataEndOffset.Offset - DataStartOffset.Offset ];
    FPop();
} TbaacChunk;

typedef struct
{
    SetRandomBackColor();
    FPushBase();

    u32 FourCC;
    u32 Field04;
    u32 Field08;
    TRelOffset TypeTableOffset;
    u32 Field10;
    u32 Field14;
    u32 Field18;
    u32 Field1C;

    FSeek( TypeTableOffset.Position );
    struct
    {
        u32 TypeCount;
        TRelOffset TypeOffsets[TypeCount];

        local u32 i, j;
        for (i = 0; i < TypeCount; ++i)
        {
            FSeek( TypeOffsets[i].Position );
            struct
            {
                u32 CategoryCount;
                TStringRelOffset TypeName;
                TRelOffset CategoryOffsets[CategoryCount];   

                for (j = 0; j < CategoryCount; ++j)
                {
                    FSeek( CategoryOffsets[j].Position );
                    struct
                    {
                        u32 Count;
                        TStringRelOffset GroupName;
                        TStringRelOffset Names[Count];
                    } TSECategory;
                }    
            } TSEType;      
        }
    } Types;

    FPopBase();
} TBSTN;

typedef struct
{
    FPushBase();

    u32 FourCC;
    u32 Size;
    u32 Field08;
    u32 Field0C;
    TRelOffset WINFOffset;
    TRelOffset WBCTOffset;

    FSeek( WINFOffset.Position );
    struct
    {
        SetRandomBackColor();
        u32 FourCC;
        u32 WaveGroupCount;
        TRelOffset WaveGroupOffsets[WaveGroupCount];

        local u32 i;
        FPush();
        for (i = 0; i < WaveGroupCount; ++i)
        {
            FSeek( WaveGroupOffsets[i].Position );
            struct
            {
                SetRandomBackColor();
                char ArchiveName[112];
                u32 WaveInfoCount;
                TRelOffset WaveInfoOffsets[ WaveInfoCount ];

                local u32 j;
                FPush();
                for (j = 0; j < WaveInfoCount; ++j)
                {
                    FSeek( WaveInfoOffsets[j].Position );
                    struct
                    {
                        SetRandomBackColor();
                        u8 Field00;
                        u8 Format;
                        u8 RootKey;
                        u8 Padding;
                        f32 SampleRate;
                        u32 WaveStart;
                        u32 WaveEnd;
                        u32 HasLoop;
                        u32 LoopStart;
                        u32 LoopEnd;
                        u32 SampleCount;
                        u16 HistoryLast;
                        u16 HistoryPenult;
                        u32 Field34;
                        u32 Field38;
                    } TWaveInfo;
                }
                FPop();
            } TWaveGroup;
        }

        FPop();
    } TWINF;

    FSeek( WBCTOffset.Position );
    struct
    {
        SetRandomBackColor();
        u32 FourCC;
        u32 Field04;
        u32 SceneCount;
        TRelOffset SceneOffsets[SceneCount];
        
        FPush();
        local u32 i;
        for (i = 0; i < SceneCount; ++i)
        {
            FSeek( SceneOffsets[i].Position );
            struct
            {
                u32 FourCC;
                u32 Field04;
                u32 Field08;
                TRelOffset CDFOffset;   
                TRelOffset CEXOffset;
                TRelOffset CSTOffset;  

                FPush();
                FSeek( CDFOffset.Position );
                struct
                {
                    u32 FourCC;
                    u32 WaveIdCount;
                    TRelOffset WaveIdOffsets[WaveIdCount];

                    FPush();
                    local u32 j;
                    for (j = 0; j < WaveIdCount; ++j)
                    {
                        FSeek( WaveIdOffsets[j].Position );
                        u32 WaveId;
                    }
                    FPop();
                } TCDF;
                FPop();               
            } TSCNE;
        }
        FPop();
    } TWBCF;

    FPopBase();
} TWSYS;

TBAA File;