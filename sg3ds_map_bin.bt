//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: sg3ds_map_bin.bt
//   Authors: TGE
//   Version: 1.0
//   Purpose: Parse Sonic Generations (3DS) *map.bin files
//  Category: 
// File Mask: *map.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "common/include.h"

local u32 i;
local u32 j;

typedef struct
{
    SetRandomBackColor();
    u32 Unknown1;

    SetRandomBackColor();
    u16 Unknown2[ Unknown1 ];

    local u32 unknown2Sum = 0;
    for ( i = 0; i < Unknown1; ++i )
        unknown2Sum += Unknown2[ i ];

    Printf( "Unknown2 Sum: %d\n", unknown2Sum );

    struct
    {
        SetRandomBackColor();
        struct Unknown3Entry Unknown3[ Unknown1 ];
    } Unknown3;

    SetRandomBackColor();
    u32 BlocksSize;

    struct
    {
        SetRandomBackColor();
        struct Block Blocks[ BlocksSize / 8 ];
    } Blocks;

    SetRandomBackColor();
    struct Extents Extents;

    SetRandomBackColor();
    u32 AreasSize;

    struct
    {
        SetRandomBackColor();
        local u32 areaCount = AreasSize / 88;
        struct Area Areas[ areaCount ];

        for ( i = 0; i < areaCount; ++i )
        {
            for ( j = 0; j < Areas[i].BlockCount; ++j )
            {
                if ( Areas[i].BlockStartIndex + j == 231 )
                    Printf( "Area: %d\n", i );
            }
        }
    } Areas;

    SetRandomBackColor();
    u16 Unknown6[ ( FileSize() - FTell() ) / 2 ]; // Indices refer to Unknown5
} MapFile;

typedef struct
{
    u8 Field00; // 0, 64, 128
    u8 Field01; // 2, 4, 6, 10
    u8 Field02; // 1, 2, 3
    u8 Field03; // 1, 2
    u8 Field04; // increments sequentially in steps from 0 to 255, offset?
    u8 Field05; // 255, 0-8
} Unknown3Entry <optimize=false>;

typedef struct
{
    u16 ModelIndex;
    u8 XOffset; // X offset from the area base position.
    u8 YOffset; // Y offset from the area base position.
    u8 ZOffset; // Z offset from the area base position.
    u8 Field05; // 0, 255
    u8 Field06; // 0
    u8 Field07; // 0
} Block <optimize=false>;

typedef struct
{
    TVector3 Min;
    TVector3 Max;
    f32 Field18;
} Extents;

typedef struct
{
    s16 PreviousIndex; // order might be wrong
    s16 NextIndex;
    s16 LeftIndex;
    s16 RightIndex;
    f32 Field08; // 0, 20, 40, 60, 80
    f32 Field0C; // 0, -30
    f32 Field10; // 20, 40, 60, 80, 100, 120
    f32 Field14; // 0, -30
    f32 Field18; // 20, 40, 60, 80, 100, 120
    f32 Field1C; // -20, -50
    f32 Field20; // 20, 40, 60, 80
    f32 Field24; // -20, -50
    f32 Field28; // 0, 20, 40, 60
    f32 Field2C; // 20, 40, 60, 80, 100, 160, 240
    s16 Field30; // 20, 40, 60, 80
    s16 Field32; // 20, 40, 60, 80, 100, 120
    s16 Field34; // 0, -30
    s16 Field36; // -20, -50
    TVector3 Position;
    u32 Field44; // 0
    s16 Field48; // 60, 100, 120, 160
    s16 Field4A; // -20, -50, -60
    s16 Field4C; // 60, 100
    s16 BlockCount;
    s16 BlockStartIndex;
    s16 Field52; // 0
    u32 Field54; // CCCCCCCC, padding
} Area <optimize=false>;

MapFile File;