//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: p4d_mns.bt
//   Authors: TGE
//   Version: 1.2
//   Purpose: Parse Persona 4 Dancing mns files
//  Category: 
// File Mask: mns*.bin
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "common/include.h"

typedef enum<u16>
{
	First = 0,
	Second = 1,
	Third = 2,
	Fourth = 3,
	Half = 0x8000
} EBeat;

typedef enum<u8>
{
	Down = 0,
	Cross = 1,
	Left = 2,
	Circle = 3,
	Up = 4,
	Triangle = 5,
	Scratch = 8
} EButton;

typedef struct
{
	EBeat Beat;
	u16 Measure;
    EButton Button;
    u8 HoldDuration;
    u16 Type;

    local f32 beatDecimal = Beat;
    if ( Beat & Half )
        beatDecimal = ( Beat & ~Half ) + 0.5f;

    local f32 totalSeconds = ( ( Measure * 4 ) + beatDecimal ) * ( 60.0f / File.Bpm );
    local u32 minutes = totalSeconds / 60;
    local f32 seconds = totalSeconds - ( minutes * 60 );
} TNote <read=TNoteToString>;

string EnumToStringOrDefault( EButton& value )
{
	string str = EnumToString( value );
	if ( str == "" )
	{
		SPrintf( str, "Unknown button: %d", (u32)value ); 
	}
	
	return str;
}

string TNoteToString( TNote& value )
{ 
    // Format note button info
    string str = "";
    string str2 = "";

    if ( value.HoldDuration != 0 )
        SPrintf( str, "%s (Hold: %d)", EnumToStringOrDefault( value.Button ), value.HoldDuration );
    else
        SPrintf( str, EnumToStringOrDefault( value.Button ) );

    if ( value.Type != 0 )
    {
        if ( value.Button == Scratch && value.Type == 1 )
            SPrintf( str, "%s (FEVER)", str );
        else
            SPrintf( str, "%s Type %d", str, value.Type );
    }

    // Format note info
    SPrintf( str, "%d:%f (%d:%.1f) %s", value.minutes, value.seconds, value.Measure, value.beatDecimal, str );

    return str; 
}

typedef struct
{
    LittleEndian();
    SetRandomBackColor();
    char Magic[4]; Assert( Magic == "MNS\0" );
    u32 Field04; // always 0
    u32 Field08; // always 1
    u32 MusicId;
    f32 Bpm;
    u16 MusicIdMajor; // doesn't always match MusicId
    u16 MusicIdMinor;
    u32 Field18; // always 0
    u32 NoteCount; // doesnt include duplicates 
    u32 Field20;

    struct
    {
        while ( !FEof() )
        {
            SetRandomBackColor();
            TNote Note;
        }
    } Notes;
} TMnsFile;

TMnsFile File;