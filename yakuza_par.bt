//------------------------------------------------ 
//--- 010 Editor v8.0 Binary Template 
// 
//      File: yakuza_par.bt 
//   Authors: TGE 
//   Version: 1.0 
//   Purpose: Parse Yakuza series PAR archive files 
//  Category:  
// File Mask: *.par
//  ID Bytes:  
//   History:  
//------------------------------------------------ 

#include "common/include.h"

typedef enum <u32>
{
    IsCompressed = 1u << 31u
} EFileFlags <read=EFileFlagsToString>;

string EFileFlagsToString( EFileFlags& value )
{
    local string str = "";
    local string curFlagStr = "";
    local u32 i = 0;
    for ( i = 0; i < 32; ++i )
    {
        if ( ( (u32)value ) & ( 1 << i ) )
        {
            switch ( i )
            {
                case 31: curFlagStr = "IsCompressed";
            }

            if ( curFlagStr == "" )
            {
                SPrintf( curFlagStr, "Flag%d", i );
            }

            str += curFlagStr;
            str += " | ";
        }
    }

    return str;
}

typedef struct
{
    SetRandomBackColor();
    LittleEndian();
    char Magic[4];
    u8 Version;
    u8 Endianness;
    if ( Endianness == 1 ) BigEndian();
    u16 Field06;
    u32 Field08;
    u32 Field0C;
    u32 DirectoryCount;
    u32 DirectoryTableOffset;
    u32 FileCount;
    u32 FileTableOffset;
    struct TArchiveEntryName DirectoryNames[ DirectoryCount ]; 
    struct TArchiveEntryName FileNames[ FileCount ];

    FSeek( DirectoryTableOffset );
    struct TDirectory Directories[ DirectoryCount ];

    FSeek( FileTableOffset );
    struct TFile Files[ FileCount ];
} TArchive;

typedef struct
{
    SetRandomBackColor();
    char Data[64];
} TArchiveEntryName <optimize=true, read=TArchiveEntryNameToString>;

string TArchiveEntryNameToString( TArchiveEntryName& value )
{
    return value.Data;
}

typedef struct
{
    SetRandomBackColor();
    u32 DirectoryCount;
    u32 DirectoryIndex;
    u32 FileCount;
    u32 FileIndex;
    u32 Field10;
    u32 Field14;
    u32 Field18;
    u32 Field1C;
} TDirectory;

typedef struct
{
    EFileFlags Flags;
    u32 UncompressedSize;
    u32 CompressedSize;
    u32 DataOffsetLo;
    u32 Field10; // 0x2020
    u32 DataOffsetHi;
    u32 Field18;
    u32 Field1C;
} TFile;

TArchive Archive;