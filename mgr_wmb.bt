//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: mgr_wmb.bt
//   Authors: TGE
//   Version: 1.0.0
//   Purpose: Parsing Metal Gear Rising: Revengeance WMB files.
//  Category: 3D Model files.
// File Mask: *.wmb
//  ID Bytes: 57 4D 42 34 ('WMB4')
//   History: 
//------------------------------------------------

#include "common/include.h"

const u32 WMB4_MAGIC                = MakeFourCC( "WMB4" );
const u32 WMB4_VERTEX_BUFFER_COUNT  = 4;
const u32 WMB4_MESH_SLOT_COUNT      = 4;

enum<u16> EPrimitiveType
{
    PrimitiveType_TriList,
    PrimtivieType_TriStrip,
};

enum<u32> EModelFlags
{
    ModelFlags_1 = 1 << 0,
    ModelFlags_2 = 1 << 1,
    ModelFlags_4 = 1 << 2,
    ModelFlags_8 = 1 << 3,
    ModelFlags_10 = 1 << 4,
    ModelFlags_20 = 1 << 5,
    ModelFlags_40 = 1 << 6,
    ModelFlags_80 = 1 << 7,
    ModelFlags_100 = 1 << 8,
    ModelFlags_200 = 1 << 9,
    ModelFlags_400 = 1 << 10,
    ModelFlags_800 = 1 << 11,
    ModelFlags_1000 = 1 << 12,
    ModelFlags_2000 = 1 << 13,
    ModelFlags_4000 = 1 << 14,
    ModelFlags_8000 = 1 << 15,
    ModelFlags_10000 = 1 << 16,
    ModelFlags_20000 = 1 << 17,
    ModelFlags_40000 = 1 << 18,
    ModelFlags_80000 = 1 << 19,
    ModelFlags_100000 = 1 << 20,
    ModelFlags_200000 = 1 << 21,
    ModelFlags_400000 = 1 << 22,
    ModelFlags_800000 = 1 << 23,
    ModelFlags_1000000 = 1 << 24,
    ModelFlags_2000000 = 1 << 25,
    ModelFlags_4000000 = 1 << 26,
    ModelFlags_8000000 = 1 << 27,
    ModelFlags_10000000 = 1 << 28,
    ModelFlags_20000000 = 1 << 29,
    ModelFlags_40000000 = 1 << 30,
    ModelFlags_80000000 = 1 << 31,
};

string EModelFlagsToString( EModelFlags value )
{
    string str = "";
    local u32 i;
    local EModelFlags mask;
    for ( i = 0; i < 32; ++i )
    {
        mask = 1 << i;
        if ( ( value & mask ) == mask )
            str += EnumToString( mask ) + " | ";
    }

    return str;
}

typedef struct
{
    SetRandomBackColor();

    u32 Magic;
    Assert( Magic == WMB4_MAGIC, "Header magic value does not match" );
    
    u32 Field00;
    EModelFlags Flags <read=EModelFlagsToString>;
    EPrimitiveType PrimitiveType;
    u16 Field0E; // always 0xFFFF, maybe strip restart value? 
    BoundingBox Extents;
    u32 BufferGroupListOffset;
    u32 BufferGroupCount;
    u32 SubMeshListOffset;
    u32 SubMeshCount;
    u32 MeshListOffset;
    u32 BoneListOffset;
    u32 BoneCount;
    u32 BoneHierarchyMapOffset;
    u32 BoneHierarchyMapSize;
    u32 BonePaletteListOffset;
    u32 BonePaletteCount;
    u32 MaterialListOffset;
    u32 MaterialCount;
    u32 TextureListOffset;
    u32 TextureCount;
    u32 MeshGroupListOffset;
    u32 MeshGroupCount;

    if ( BufferGroupListOffset && BufferGroupCount ) 
    {
        FSeek( BufferGroupListOffset );
        struct BufferGroup BufferGroups( Flags )[ BufferGroupCount ];
    }

    if ( SubMeshListOffset && SubMeshCount )
    {
        FSeek( SubMeshListOffset );
        struct SubMesh SubMeshes[ SubMeshCount ];
    }

    if ( MeshListOffset )
    {
        FSeek( MeshListOffset );

        struct
        {
            SetRandomBackColor();
            u32 Offset;
            u32 Count;
    
            if ( Offset && Count )
            {
                local u64 seekBack = FTell();
                FSeek( Offset );
    
                struct
                {
                    struct Mesh Meshes[ Count ];
                } Meshes;
    
                FSeek( seekBack );
            }
        } Slots[WMB4_MESH_SLOT_COUNT] <optimize=false>;
    }

    if ( BoneListOffset && BoneCount )
    {
        FSeek( BoneListOffset );
        SetRandomBackColor();
        struct Bone Bones[ BoneCount ];
    }

    if ( BoneHierarchyMapOffset && BoneHierarchyMapSize )
    {
        FSeek( BoneHierarchyMapOffset );
        SetRandomBackColor();
        //s16 BoneHierarchyMap[ BoneHierarchyMapSize / 2 ];

        struct {
            int16 firstLevel[16];
            local int i;
            local int j = 0;
            for (i = 0; i < 16; i++) {
                if ( firstLevel[i] != -1 ) { 
                    j += 1;
                 }
            } 
            int16 secondLevel[j*16];
            local int k = 0;
            for (i = 0; i < j*16; i++) {
                if ( secondLevel[i] != -1 ) {
                    k += 1;
                }
            }
            int16 thirdLevel[k*16];
        } BoneIndexTranslateTable;
    }

    if ( BonePaletteListOffset && BonePaletteCount )
    {
        FSeek( BonePaletteListOffset );
        struct BonePalette BonePalettes[ BonePaletteCount ];
    }

    if ( MaterialListOffset && MaterialCount )
    {
        FSeek( MaterialListOffset );
        struct Material Materials[ MaterialCount ];
    }

    if ( TextureListOffset && TextureCount )
    {
        FSeek( TextureListOffset );
        SetRandomBackColor();
        struct TextureRef TextureRefs[ TextureCount ];
    }

    if ( MeshGroupListOffset && MeshGroupCount )
    {
        FSeek( MeshGroupListOffset );
        struct MeshGroup MeshGroups[ MeshGroupCount ];
    }
} Model;

typedef struct( EModelFlags flags )
{
    SetRandomBackColor();

    u32 VertexBufferOffset[WMB4_VERTEX_BUFFER_COUNT];
    u32 VertexCount;
    u32 IndexBufferOffset;
    u32 IndexCount;

    local u32 seekBack = FTell();

    if ( VertexCount )
    {
        local u32 i;
        local u32 j;
        local u32 offset;
        for ( i = 0; i < WMB4_VERTEX_BUFFER_COUNT; ++i )
        {
            offset = VertexBufferOffset[ i ];
            if ( offset )
            {
                FSeek( offset );

                switch ( i )
                {
                    case 0: struct VertexBuffer0 VertexBuffer0( flags ); break;
                    case 1: struct VertexBuffer1 VertexBuffer1( flags ); break;
                }
            }
        }
    }

    if ( IndexBufferOffset && IndexCount )
    {
        SetRandomBackColor();
        FSeek( IndexBufferOffset );
        u16 IndexBuffer[ IndexCount ];
    }

    FSeek( seekBack );
} BufferGroup <optimize=false>;

typedef struct( EModelFlags flags )
{
    SetRandomBackColor();

    for ( j = 0; j < VertexCount; ++j )
    {
        struct( EModelFlags flags )
        {
            // ModelFlags_1 | ModelFlags_2 | ModelFlags_4 | ModelFlags_100 | 
            TVector3 Position;
            TVector2Half UV;
            TNormal11_11_10 Normal;
            TNormal11_11_10 Tangent;
            
            if ( flags & ModelFlags_10 )
            {
                // ModelFlags_1 | ModelFlags_2 | ModelFlags_4 | ModelFlags_10 | ModelFlags_20 | ModelFlags_100 | 
                u8 BoneIndex0;
                u8 BoneIndex1;
                u8 BoneIndex2;
                u8 BoneIndex3;
                u8 BoneWeight0;
                u8 BoneWeight1;
                u8 BoneWeight2;
                u8 BoneWeight3;
            }

            if ( !( flags & ModelFlags_10 ) && flags & ModelFlags_10000 )
                u32 Color;

            if ( !( flags & ModelFlags_10 ) && flags & ModelFlags_200 )
                TVector2Half UV;

        } Vertex( flags );
    }
} VertexBuffer0;

typedef struct( EModelFlags flags )
{
    SetRandomBackColor();

    for ( j = 0; j < VertexCount; ++j )
    {
        struct( EModelFlags flags )
        {
            // ModelFlags_0x00000001 | ModelFlags_0x00000002 | ModelFlags_0x00000004 | ModelFlags_0x00000010 | 
            // ModelFlags_0x00000020 | ModelFlags_0x00000100 | ModelFlags_0x00000200

            if ( ( flags & ModelFlags_10 ) && flags & ModelFlags_10000 )
                u32 Color;

            if ( ( flags & ModelFlags_10 ) && flags & ModelFlags_200 )
                TVector2Half UV;
        } Vertex( flags );
    }
} VertexBuffer1;

typedef struct
{
    SetRandomBackColor();

    s32 BufferGroupIndex;
    s32 VertexBufferStartIndex;
    s32 IndexBufferStartIndex;
    s32 VertexCount;
    s32 FaceCount;
} SubMesh <optimize=false>;

typedef struct
{
    s32 SubMeshIndex;
    s32 GroupIndex;
    s16 MaterialIndex;
    s16 BonePaletteIndex;
    s32 Version;  
} Mesh;

typedef struct
{
    u16 GlobalId;
    u16 LocalId;
    s16 ParentIndex;
    u16 Field08;
    TVector3 Local;
    TVector3 World;
} Bone;

typedef struct
{
    SetRandomBackColor();

    u32 BoneIndexListOffset;
    u32 BoneIndexCount;
    
    if ( BoneIndexListOffset && BoneIndexCount )
    {
        local u64 seekBack = FTell();
        FSeek( BoneIndexListOffset );
        u8 BoneIndices[ BoneIndexCount ];
        FSeek( seekBack );
    }
} BonePalette <optimize=false>;

typedef struct
{
    SetRandomBackColor();

    u32 ShaderNameOffset;
    u32 MaterialTextureMapListOffset;
    u32 Field08;
    u32 ShaderParameterListOffset;
    u16 Field10;
    u16 Field12;
    u16 Field14;
    u16 ShaderParameterCount;
    
    local u64 seekBack = FTell();
    if ( ShaderNameOffset != 0 )
    {
        FSeek( ShaderNameOffset );
        string ShaderName;
    }

    if ( MaterialTextureMapListOffset )
    {
        FSeek( MaterialTextureMapListOffset );
        local u32 size = ( ShaderParameterListOffset - MaterialTextureMapListOffset );
        struct MaterialTextureMapList TextureMapList( size );
    }

    if ( ShaderParameterListOffset && ShaderParameterCount )
    {
        FSeek( ShaderParameterListOffset );
        f32 ShaderParameters[ ShaderParameterCount ];
    }

    FSeek( seekBack );
} Material <optimize=false>;

typedef struct( u32 size )
{
    if ( size >= 4 ) u32 Field00;
    if ( size >= 8 ) u32 AlbedoMapIndex;
    if ( size >= 12 ) u32 Field08;   
    if ( size >= 16 ) u32 Field0C;
    if ( size >= 20 ) u32 Field10;
    if ( size >= 24 ) u32 Field14;
    if ( size >= 28 ) u32 Field18;
    if ( size >= 32 ) u32 NormalMapIndex;

    if ( size >= 36 )
    {
        u32 Field20[ ( size - 32 ) / 4 ];
    }
} MaterialTextureMapList <optimize=false>;

typedef struct
{
    u32 Field00;
    u32 GlobalId;
} TextureRef;

typedef struct
{
    SetRandomBackColor();

    u32 NameOffset;
    BoundingBox Extents;
    struct
    {
        u32 Offset;
        u32 Count;
    
        if ( Offset && Count )
        {
            local u64 seekBack = FTell();
            FSeek( Offset );
            struct { u16 Ids[ Count ]; } Ids;
            FSeek( seekBack );
        }
    } MeshIds[ 5 ] <optimize=false>;

    if ( NameOffset )
    {
        local u64 seekBack = FTell();
        FSeek( NameOffset );
        string Name;
        FSeek( seekBack );
    }
} MeshGroup <optimize=false>;

Model File;